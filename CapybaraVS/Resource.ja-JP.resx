<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Abs" xml:space="preserve">
    <value>&lt;n&gt;の値の絶対値を参照します。</value>
  </data>
  <data name="Analyze_MetropolisMethod" xml:space="preserve">
    <value>メトロポリス法を行います。&lt;random&gt; 乱数サンプル。&lt;objective&gt; 目的関数。&lt;evaluate&gt; 評価関数。&lt;changeEvent&gt; 切替時発生イベント。</value>
  </data>
  <data name="And" xml:space="preserve">
    <value>&lt;sample&gt;リストがすべて true かを判定します。</value>
  </data>
  <data name="Append" xml:space="preserve">
    <value>&lt;sample&gt; リストに要素 &lt;n&gt; を追加します。</value>
  </data>
  <data name="AppendVariableList" xml:space="preserve">
    <value>変数リストに要素 &lt;n&gt; を追加します。</value>
  </data>
  <data name="ArgumentForced" xml:space="preserve">
    <value>チェックすると引数キャッシュを無視します。引数の参照先の値が動的に変化する場合に必要です。ただし、コールバック時は毎回キャッシュはクリアされています。</value>
  </data>
  <data name="AssignmentFunc" xml:space="preserve">
    <value>関数を定義します。</value>
  </data>
  <data name="CallerArgument" xml:space="preserve">
    <value>仮引数を参照します。</value>
  </data>
  <data name="CallFile" xml:space="preserve">
    <value>&lt;path&gt;で指定したファイルを実行します。&lt;arguments&gt;リストに実行パラメータを指定できます。&lt;redirect&gt;リダイレクトを指定します。終了コードは、リダイレクトを有効にしなければ取得できません。</value>
  </data>
  <data name="Confirmation" xml:space="preserve">
    <value>確認</value>
  </data>
  <data name="ConfirmationAllDelete" xml:space="preserve">
    <value>すべて削除してもよろしいですか？</value>
  </data>
  <data name="ConfirmationDelete" xml:space="preserve">
    <value>消去してもよろしいですか？</value>
  </data>
  <data name="ConsoleOut" xml:space="preserve">
    <value>&lt;n&gt;をコンソールに出力します。</value>
  </data>
  <data name="Contains" xml:space="preserve">
    <value>&lt;sample&gt;リストに &lt;n&gt; と一致する要素があれば True を返します。無ければ False を返します。</value>
  </data>
  <data name="Count" xml:space="preserve">
    <value>&lt;sample&gt;リストの要素数を参照します。</value>
  </data>
  <data name="CreateVariable" xml:space="preserve">
    <value>変数を作成し、その参照をノードを作成します。</value>
  </data>
  <data name="CreateVariableFunc" xml:space="preserve">
    <value>イベント変数を作成し、その参照をノードを作成します。</value>
  </data>
  <data name="CreateVariableList" xml:space="preserve">
    <value>変数リストを作成し、その参照をノードを作成します。</value>
  </data>
  <data name="Dec" xml:space="preserve">
    <value>&lt;n&gt; をデクリメントします。</value>
  </data>
  <data name="DiagnosticsLib_GetListOfRunningProcesses" xml:space="preserve">
    <value>実行中のプロセス名一覧を参照します。&lt;distinct&gt; を True にすると同名をまとめます。</value>
  </data>
  <data name="Div" xml:space="preserve">
    <value>&lt;base&gt;を&lt;sample&gt;リストの値だけ除算します。</value>
  </data>
  <data name="EnvironmentLib_CommandLineArgs" xml:space="preserve">
    <value>コマンドライン引数一覧を返します。</value>
  </data>
  <data name="EnvironmentLib_CommandLineOption" xml:space="preserve">
    <value>-から始まるコマンドライン引数一覧を返します。</value>
  </data>
  <data name="EnvironmentLib_CommandLineParam" xml:space="preserve">
    <value>-から始まらないコマンドライン引数一覧を返します。</value>
  </data>
  <data name="EnvironmentLib_GetEnvironmentVariable" xml:space="preserve">
    <value>環境変数一覧を参照します。</value>
  </data>
  <data name="EnvironmentLib_MachineName" xml:space="preserve">
    <value>マシン名を参照します。</value>
  </data>
  <data name="EnvironmentLib_ReplaceEnvironmentVariable" xml:space="preserve">
    <value>文字列中の "%環境変数%" を環境変数に置換します。</value>
  </data>
  <data name="EnvironmentLib_UserName" xml:space="preserve">
    <value>ユーザー名を参照します。</value>
  </data>
  <data name="Eq" xml:space="preserve">
    <value>&lt;n1&gt; == &lt;n2&gt; を判定します。</value>
  </data>
  <data name="FileLib_CloseReadStream" xml:space="preserve">
    <value>&lt;stream&gt; 入力用ファイルストリームを破棄します。</value>
  </data>
  <data name="FileLib_CloseWriteStream" xml:space="preserve">
    <value>&lt;stream&gt; 出力用ファイルストリームを破棄します。</value>
  </data>
  <data name="FileLib_Combine" xml:space="preserve">
    <value>複数の文字列を１つのパスに結合します。&lt;slashSeparate&gt; が True のときは、&lt;//&gt; の代わりに / でディレクトリを区切ります。</value>
  </data>
  <data name="FileLib_ConsoleOutBoolList" xml:space="preserve">
    <value>bool 型リストをコンソールに出力します。</value>
  </data>
  <data name="FileLib_ConsoleOutDoubleList" xml:space="preserve">
    <value>double 型リストをコンソールに出力します。</value>
  </data>
  <data name="FileLib_ConsoleOutIntList" xml:space="preserve">
    <value>int 型リストをコンソールに出力します。</value>
  </data>
  <data name="FileLib_ConsoleOutLongList" xml:space="preserve">
    <value>long 型リストをコンソールに出力します。</value>
  </data>
  <data name="FileLib_ConsoleOutStringList" xml:space="preserve">
    <value>文字列リストをコンソールに出力します。</value>
  </data>
  <data name="FileLib_Copy" xml:space="preserve">
    <value>ファイルをコピーします。</value>
  </data>
  <data name="FileLib_CreateDirectory" xml:space="preserve">
    <value>&lt;add serial number&gt; が True のときは、すでに同名のディレクトリが存在する場合は、2から番号を末尾に追加して作成します。</value>
  </data>
  <data name="FileLib_CreateReadStreamVariable" xml:space="preserve">
    <value>&lt;stream&gt; 入力用ファイルストリーム変数を作成もしくは参照します。</value>
  </data>
  <data name="FileLib_CreateWriteStreamVariable" xml:space="preserve">
    <value>&lt;stream&gt; 出力用ファイルストリーム変数を作成もしくは参照します。</value>
  </data>
  <data name="FileLib_Delete" xml:space="preserve">
    <value>ファイルを削除します。</value>
  </data>
  <data name="FileLib_DirectoryExists" xml:space="preserve">
    <value>ディレクトリが存在していれば True を返します。</value>
  </data>
  <data name="FileLib_Exists" xml:space="preserve">
    <value>ファイルが存在していれば True を返します。</value>
  </data>
  <data name="FileLib_FileOpenAddWriteAndClose" xml:space="preserve">
    <value>&lt;fileName&gt; ファイルへ &lt;str&gt; テキストを出力します。&lt;lineMode&gt; が True の場合、出力後に改行します。&lt;fileName&gt; ファイル が無ければ作成します。</value>
  </data>
  <data name="FileLib_ForeachFilesInvoke" xml:space="preserve">
    <value>&lt;search pattern&gt; パターンでファイル名を検索し見つかったファイル名を仮引数に &lt;event&gt; をコールします。&lt;all directories&gt; が True の場合は、サブディレクトリ以下も再帰的に検索します。</value>
  </data>
  <data name="FileLib_GetCurrentDirectory" xml:space="preserve">
    <value>現在のカレントディレクトリを参照します。</value>
  </data>
  <data name="FileLib_GetDirectories" xml:space="preserve">
    <value>&lt;path&gt; ディレクトリにあるサブディレクトリ一覧を参照します。&lt;all directories&gt; が True の場合は、サブディレクトリ以下も再帰的に検索します。&lt;ignore list&gt; には無視するディレクトリ名を指定します。</value>
  </data>
  <data name="FileLib_GetDirectoryName" xml:space="preserve">
    <value>パスからディレクトリ名を参照します。</value>
  </data>
  <data name="FileLib_GetExtension" xml:space="preserve">
    <value>パスから拡張子を参照します。</value>
  </data>
  <data name="FileLib_GetFileName" xml:space="preserve">
    <value>パスからファイル名を参照します。</value>
  </data>
  <data name="FileLib_GetFileNameWithoutExtension" xml:space="preserve">
    <value>パスの拡張子のないファイル名を参照します。</value>
  </data>
  <data name="FileLib_GetFiles" xml:space="preserve">
    <value>&lt;search pattern&gt; パターンでファイル名を検索します。&lt;all directories&gt; が True の場合は、サブディレクトリ以下も再帰的に検索します。</value>
  </data>
  <data name="FileLib_GetFileSize" xml:space="preserve">
    <value>ファイルサイズを参照します。</value>
  </data>
  <data name="FileLib_GetFilesSize" xml:space="preserve">
    <value>&lt;search pattern&gt; パターンでファイルを検索しトータルのファイルサイズを参照します。&lt;all directories&gt; が True の場合は、サブディレクトリ以下も再帰的に検索します。</value>
  </data>
  <data name="FileLib_GetFilsFromDirectories" xml:space="preserve">
    <value>&lt;directories&gt;ディレクトリリストにあるディレクトリからサブディレクトリ一覧を参照します。&lt;all directories&gt; が True の場合は、サブディレクトリ以下も再帰的に検索します。&lt;ignore list&gt; には無視するディレクトリ名を指定します。</value>
  </data>
  <data name="FileLib_GetFullPath" xml:space="preserve">
    <value>パスから絶対パスを参照します。</value>
  </data>
  <data name="FileLib_GetPathRoot" xml:space="preserve">
    <value>パスからルートディレクトリ名を参照します。</value>
  </data>
  <data name="FileLib_GetReadStream" xml:space="preserve">
    <value>入力用ファイルストリームを作成します。</value>
  </data>
  <data name="FileLib_GetWriteStream" xml:space="preserve">
    <value>&lt;stream&gt; 出力用ファイルストリームを作成します。&lt;append&gt; を True にした場合、追加書き込み用に作成します。</value>
  </data>
  <data name="FileLib_HasExtension" xml:space="preserve">
    <value>パスに拡張子が含まれていれば True を返します。</value>
  </data>
  <data name="FileLib_IsPathRooted" xml:space="preserve">
    <value>パスにルートが含まれていれば True を返します。</value>
  </data>
  <data name="FileLib_Move" xml:space="preserve">
    <value>&lt;sourceFileName&gt; から &lt;destFileName&gt; に変更（もしくは移動）します。</value>
  </data>
  <data name="FileLib_PathListToDirectoryList" xml:space="preserve">
    <value>パスリストをディレクトリリストに変換します。</value>
  </data>
  <data name="FileLib_PathListToExtensionList" xml:space="preserve">
    <value>パスリストを拡張子リストに変換します。</value>
  </data>
  <data name="FileLib_PathListToFileList" xml:space="preserve">
    <value>パスリストをファイル名リストに変換します。</value>
  </data>
  <data name="FileLib_SetCurrentDirectory" xml:space="preserve">
    <value>現在のカレントディレクトリを変更します。</value>
  </data>
  <data name="FileLib_StreamReadLine" xml:space="preserve">
    <value>&lt;stream&gt; 入力用ファイルストリームから１行の文字列を入力しその内容を仮引数に &lt;invoke&gt; をコールし行数を返します。&lt;autoClose&gt; が True の場合、入力後にファイルストリームを破棄します。</value>
  </data>
  <data name="FileLib_StreamWrite" xml:space="preserve">
    <value>出力用ファイルストリームに &lt;str&gt; 文字列を出力します。&lt;lineMode&gt; が True の場合、出力後に改行します。&lt;autoClose&gt; が True の場合、出力後にファイルストリームを破棄します。</value>
  </data>
  <data name="For" xml:space="preserve">
    <value>&lt;from&gt; から &lt;to&gt; 未満までをインデックスにループし、インデックスを仮引数に &lt;func&gt; をコールします。</value>
  </data>
  <data name="Foreach" xml:space="preserve">
    <value>&lt;sample&gt;リストの要素を仮引数に &lt;func&gt; をコールします。</value>
  </data>
  <data name="Ge" xml:space="preserve">
    <value>(n1) &gt;= (n2) を判定します。</value>
  </data>
  <data name="GetListIndex" xml:space="preserve">
    <value>&lt;sample&gt; リストの &lt;index&gt; 番目の要素を参照します。</value>
  </data>
  <data name="GetListLast" xml:space="preserve">
    <value>&lt;sample&gt; リストの最後の要素を参照します。</value>
  </data>
  <data name="GetVariable" xml:space="preserve">
    <value>変数を参照します。</value>
  </data>
  <data name="GetVariableFromIndex" xml:space="preserve">
    <value>変数リストの &lt;index&gt; 番目の要素を参照します。</value>
  </data>
  <data name="Graph_CreateErrorList" xml:space="preserve">
    <value>リストを元に各値にそれぞれerrorValueを加算した誤差リストを作成します。</value>
  </data>
  <data name="Graph_CreatePlotInfo" xml:space="preserve">
    <value>グラフに出力する情報を作成します。</value>
  </data>
  <data name="Graph_MakePlotList" xml:space="preserve">
    <value>コールバックを使ってグラフに出力するリストを作成します。</value>
  </data>
  <data name="Graph_OutPlot" xml:space="preserve">
    <value>任意の数のグラフを重ねて表示します。</value>
  </data>
  <data name="Gt" xml:space="preserve">
    <value>(n1) &gt; (n2) を判定します。</value>
  </data>
  <data name="If" xml:space="preserve">
    <value>&lt;conditions&gt;が True のとき &lt;return true&gt; を返します。False のときは &lt;return false&gt; を返します。</value>
  </data>
  <data name="If_Action" xml:space="preserve">
    <value>&lt;conditions&gt;が True のとき &lt;func true&gt; をコールします。False のときは &lt;func false&gt; をコールします。</value>
  </data>
  <data name="If_Func" xml:space="preserve">
    <value>&lt;conditions&gt;が True のとき &lt;func true&gt; をコールします。False のときは &lt;func false&gt; をコールします。結果は返し値となります。</value>
  </data>
  <data name="Image_ColorExtraction" xml:space="preserve">
    <value>指定の画像を色要素で分解した画像を作成します。</value>
  </data>
  <data name="Image_Create3x3Filter" xml:space="preserve">
    <value>空間フィルターを指定して処理を作成します。</value>
  </data>
  <data name="Image_Create3x3FilterDiff" xml:space="preserve">
    <value>ハブの処理結果との差分処理を作成します。</value>
  </data>
  <data name="Image_Create3x3FilterHub" xml:space="preserve">
    <value>複数のIKernel3x3RGBAをひとまとめにするためのハブを作成します。</value>
  </data>
  <data name="Image_CreateAverageFilter" xml:space="preserve">
    <value>平滑化（３✕３平均値フィルタ）処理を作成します。</value>
  </data>
  <data name="Image_CreateCAdaptiveBinarizationRGB" xml:space="preserve">
    <value>適応的二値化処理を作成します。</value>
  </data>
  <data name="Image_CreateCBinarizationRGB" xml:space="preserve">
    <value>２値化処理を作成します。</value>
  </data>
  <data name="Image_CreateCEventFuncRGB" xml:space="preserve">
    <value>各画素値に対して任意の処理を作成します。</value>
  </data>
  <data name="Image_CreateCGammaCorrection" xml:space="preserve">
    <value>ガンマ補正処理を作成します。</value>
  </data>
  <data name="Image_CreateCGammaCorrectionRGB" xml:space="preserve">
    <value>RGB別ガンマ補正処理を作成します。</value>
  </data>
  <data name="Image_CreateCGlayScale" xml:space="preserve">
    <value>グレースケール処理を作成します。</value>
  </data>
  <data name="Image_CreateCMulRateRGB" xml:space="preserve">
    <value>各画素値を定数倍する処理を作成します。</value>
  </data>
  <data name="Image_CreateContrastRGB" xml:space="preserve">
    <value>コントラスト処理を作成します。</value>
  </data>
  <data name="Image_CreateCPixelOutRPGAHub" xml:space="preserve">
    <value>複数のIRGBAPixelOutRPGAをひとまとめにするためのハブを作成します。</value>
  </data>
  <data name="Image_CreateCSubAverageRGB" xml:space="preserve">
    <value>各画素値を画素値の平均で引く処理を作成します。</value>
  </data>
  <data name="Image_CreateDilationFilter" xml:space="preserve">
    <value>膨張処理を作成します。</value>
  </data>
  <data name="Image_CreateErosionFilter" xml:space="preserve">
    <value>収縮処理を作成します。</value>
  </data>
  <data name="Image_CreateFirstDerivativeFilter" xml:space="preserve">
    <value>輪郭抽出（３✕３一次微分フィルタ）処理を作成します。</value>
  </data>
  <data name="Image_CreateFreeFilter_ld" xml:space="preserve">
    <value>空間フィルターのためのカーネルをセットアップします。３行３列のカーネルなので必要な情報は、9つの係数です。</value>
  </data>
  <data name="Image_CreateFreeFilter_ld_d" xml:space="preserve">
    <value>空間フィルターのためのカーネルをセットアップします。３行３列のカーネルなので必要な情報は、9つの係数です。各係数はdivで割られてセットされます。</value>
  </data>
  <data name="Image_CreateGaussianFilter" xml:space="preserve">
    <value>平滑化（３✕３ガウシアンフィルタ）処理を作成します。</value>
  </data>
  <data name="Image_CreateMedianFilter" xml:space="preserve">
    <value>平滑化（３✕３メディアンフィルタ）処理を作成します。</value>
  </data>
  <data name="Image_CreateNegativePositiveReversalRGB" xml:space="preserve">
    <value>ネガポジ反転処理を作成します。</value>
  </data>
  <data name="Image_CreatePrewittFilter" xml:space="preserve">
    <value>輪郭抽出（３✕３プレヴィットフィルタ）処理を作成します。</value>
  </data>
  <data name="Image_CreateRGBA3x3FilteringProc" xml:space="preserve">
    <value>３✕３の畳み込み処理を作成します。</value>
  </data>
  <data name="Image_CreateSobelFilter" xml:space="preserve">
    <value>輪郭抽出（３✕３ソーベルフィルタ）処理を作成します。</value>
  </data>
  <data name="Image_CreateTransparent" xml:space="preserve">
    <value>透過処理を作成します。</value>
  </data>
  <data name="Image_CreateUnsharpMasking" xml:space="preserve">
    <value>鮮鋭化（３✕３アンシャープマスキング）処理を作成します。</value>
  </data>
  <data name="Image_CreateWhiteMaskFilter" xml:space="preserve">
    <value>白色を抜き色にします。</value>
  </data>
  <data name="Image_CRTGamma2dot2" xml:space="preserve">
    <value>CRT gamma 2.2</value>
  </data>
  <data name="Image_GammaCollection2dot2" xml:space="preserve">
    <value>gamma correction 1/2.2</value>
  </data>
  <data name="Image_GammaCorrection" xml:space="preserve">
    <value>ガンマ補正。</value>
  </data>
  <data name="Image_GetAverageNumberOfPixels" xml:space="preserve">
    <value>画像の画素値の平均値を取得します。</value>
  </data>
  <data name="Image_GetHistogram" xml:space="preserve">
    <value>画像のヒストグラムを取得します。</value>
  </data>
  <data name="Image_GetMaxNumberOfPixels" xml:space="preserve">
    <value>画像の画素値分布中の最大数存在する画素値の分布数を取得します。ただし、透過色は無視します。</value>
  </data>
  <data name="Image_GetPixelHeight" xml:space="preserve">
    <value>画像の縦幅を取得します。</value>
  </data>
  <data name="Image_GetPixelWidth" xml:space="preserve">
    <value>画像の横幅を取得します。</value>
  </data>
  <data name="Image_GlayScale" xml:space="preserve">
    <value>画像をグレースケール変換します。</value>
  </data>
  <data name="Image_Kernel3x3RGBAProcessing" xml:space="preserve">
    <value>３✕３の畳み込みを処理します。</value>
  </data>
  <data name="Image_OpenImage" xml:space="preserve">
    <value>ファイルからイメージ（BMP、JPEG、PNG、TIFF、Windows Media Photo、GIF）を読み込みます。</value>
  </data>
  <data name="Image_OpenMedia" xml:space="preserve">
    <value>動画を開きます。</value>
  </data>
  <data name="Image_OutHistogram" xml:space="preserve">
    <value>ヒストグラムを表示します。グレースケールの指定及びRGBそれぞれの指定が可能です。</value>
  </data>
  <data name="Image_OutImageFile" xml:space="preserve">
    <value>指定の形式でファイルに画像を保存します。</value>
  </data>
  <data name="Image_OutImageWindow" xml:space="preserve">
    <value>BitmapImageを受け取ってイメージを表示します。</value>
  </data>
  <data name="Image_OutMediaWindow" xml:space="preserve">
    <value>ウインドウを開いて動画を再生します。</value>
  </data>
  <data name="Image_PixelOutRGBAProcessing" xml:space="preserve">
    <value>RGB及び透過色に対して処理するためのインターフェイスとその結果に対して処理を行うためのインターフェイスを使って画素処理を行います。</value>
  </data>
  <data name="Image_Scaling" xml:space="preserve">
    <value>画像を拡縮します。</value>
  </data>
  <data name="Image_ScreenCapture" xml:space="preserve">
    <value>スクリーンをキャプチャします。</value>
  </data>
  <data name="Image_Synthesis" xml:space="preserve">
    <value>画像を合成します。</value>
  </data>
  <data name="Inc" xml:space="preserve">
    <value>&lt;n&gt; をインクリメントします。</value>
  </data>
  <data name="Invoke" xml:space="preserve">
    <value>&lt;invoke&gt;をコールします。</value>
  </data>
  <data name="InvokeWithArg" xml:space="preserve">
    <value>&lt;argument&gt; を仮引数に &lt;invoke&gt; をコールします。</value>
  </data>
  <data name="Ip_GetContents" xml:space="preserve">
    <value>HTTPのコンテンツを参照します。</value>
  </data>
  <data name="Ip_GetHeaders" xml:space="preserve">
    <value>HTTPのヘッダーを参照します。</value>
  </data>
  <data name="Ip_GetHostEntry" xml:space="preserve">
    <value>ホスト名からアドレス情報を参照します。</value>
  </data>
  <data name="Ip_GetHostName" xml:space="preserve">
    <value>アドレスからホスト名を参照します。</value>
  </data>
  <data name="Ip_GetMyHostAddress" xml:space="preserve">
    <value>ホストアドレスを参照します。</value>
  </data>
  <data name="Ip_GetMyHostName" xml:space="preserve">
    <value>ホスト名を参照します。</value>
  </data>
  <data name="Ip_WebAPI" xml:space="preserve">
    <value>WebAPIコマンドを呼び出します。</value>
  </data>
  <data name="IsPublicExecute" xml:space="preserve">
    <value>「Execute」ボタンで実行できるエントリーリストに登録します。</value>
  </data>
  <data name="Le" xml:space="preserve">
    <value>(n1) &lt;= (n2) を判定します。</value>
  </data>
  <data name="ListFactory_Distinct" xml:space="preserve">
    <value>string 型のリストの同じ内容の要素を一つにまとめます。</value>
  </data>
  <data name="ListFactory_DoubleCount" xml:space="preserve">
    <value>double 型の &lt;sample&gt; リストの要素が &lt;value&gt; と同じ値をいくつ持っているかカウントします。</value>
  </data>
  <data name="ListFactory_DoubleCountInvoke" xml:space="preserve">
    <value>double 型の &lt;sample&gt; リストの要素を仮引数に &lt;predicate&gt; をコールし返り値が True であればカウントアップしてカウント数を返します。</value>
  </data>
  <data name="ListFactory_DoubleToInt" xml:space="preserve">
    <value>double 型リストから int 型リストを作成します。</value>
  </data>
  <data name="ListFactory_DoubleToString" xml:space="preserve">
    <value>double 型リストから string 型リストを作成します。</value>
  </data>
  <data name="ListFactory_FilteringDoubleList" xml:space="preserve">
    <value>double 型の &lt;sample&gt; リストの要素を仮引数に &lt;predicate&gt; をコールし返り値が True であればリストに登録して返します。</value>
  </data>
  <data name="ListFactory_FilteringIntList" xml:space="preserve">
    <value>int 型の &lt;sample&gt; リストの要素を仮引数に &lt;predicate&gt; をコールし返り値が True であればリストに登録して返します。</value>
  </data>
  <data name="ListFactory_FilteringWordList" xml:space="preserve">
    <value>string 型の &lt;sample&gt; リストの要素を仮引数に &lt;predicate&gt; をコールし返り値が True であればリストに登録して返します。</value>
  </data>
  <data name="ListFactory_IntCountInvoke" xml:space="preserve">
    <value>int 型の &lt;sample&gt; リストの要素を仮引数に &lt;predicate&gt; をコールし返り値が True であればカウントアップしてカウント数を返します。</value>
  </data>
  <data name="ListFactory_IntListSetCount" xml:space="preserve">
    <value>int 型の &lt;sample&gt; リストの要素が &lt;value&gt; と同じ値をいくつ持っているかカウントします。</value>
  </data>
  <data name="ListFactory_IntToDouble" xml:space="preserve">
    <value>int 型リストから double 型リストを作成します。</value>
  </data>
  <data name="ListFactory_IntToString" xml:space="preserve">
    <value>int 型リストから string 型リストを作成します。</value>
  </data>
  <data name="ListFactory_JoinDoubleList" xml:space="preserve">
    <value>&lt;valus&gt; double 型リストを &lt;separator&gt; を区切りに連結します。</value>
  </data>
  <data name="ListFactory_JoinIntList" xml:space="preserve">
    <value>&lt;valus&gt; int 型リストを &lt;separator&gt; を区切りに連結します。</value>
  </data>
  <data name="ListFactory_JoinStringList" xml:space="preserve">
    <value>&lt;valus&gt; string 型リストを &lt;separator&gt; を区切りに連結します。</value>
  </data>
  <data name="ListFactory_MakeListDouble" xml:space="preserve">
    <value>&lt;value&gt; を開始値に &lt;num&gt; の数だけ &lt;step&gt; を加算した要素を持った配列を作成します。</value>
  </data>
  <data name="ListFactory_MakeListDouble2" xml:space="preserve">
    <value>&lt;value&gt; を開始値に &lt;num&gt; の数だけ &lt;step&gt; を加算し &lt;power&gt; 乗した要素を持った配列を作成します。</value>
  </data>
  <data name="ListFactory_SortAscDoubleList" xml:space="preserve">
    <value>double 型のリストを降順にソートします。</value>
  </data>
  <data name="ListFactory_SortAscIntList" xml:space="preserve">
    <value>int 型のリストを降順にソートします。</value>
  </data>
  <data name="ListFactory_SortAscStringList" xml:space="preserve">
    <value>string 型のリストを降順にソートします。</value>
  </data>
  <data name="ListFactory_SortDescDoubleList" xml:space="preserve">
    <value>double 型のリストを昇順にソートします。</value>
  </data>
  <data name="ListFactory_SortDescIntList" xml:space="preserve">
    <value>int 型のリストを昇順にソートします。</value>
  </data>
  <data name="ListFactory_SortDescStringList" xml:space="preserve">
    <value>string 型のリストを昇順にソートします。</value>
  </data>
  <data name="ListFactory_StringToParseDoubleList" xml:space="preserve">
    <value>カンマ区切りで数字の書かれた文字列から double 型リストを作成します。</value>
  </data>
  <data name="ListFactory_StringToParseIntList" xml:space="preserve">
    <value>カンマ区切りで数字の書かれた文字列から int 型リストを作成します。</value>
  </data>
  <data name="ListFactory_WordCount" xml:space="preserve">
    <value>string 型の &lt;sample&gt; リストの要素が &lt;word&gt; と同じ値をいくつ持っているかカウントします。</value>
  </data>
  <data name="ListFactory_WordCountInvoke" xml:space="preserve">
    <value>string 型の &lt;sample&gt; リストの要素を仮引数に &lt;predicate&gt; をコールし返り値が True であればカウントアップしてカウント数を返します。</value>
  </data>
  <data name="LiteralListType" xml:space="preserve">
    <value>定数リストを作成します。</value>
  </data>
  <data name="LiteralType" xml:space="preserve">
    <value>定数を作成します。</value>
  </data>
  <data name="Lt" xml:space="preserve">
    <value>(n1) &lt; (n2) を判定します。</value>
  </data>
  <data name="MathLib_Acos" xml:space="preserve">
    <value>逆余弦を求めます。</value>
  </data>
  <data name="MathLib_Asin" xml:space="preserve">
    <value>逆正弦を求めます。</value>
  </data>
  <data name="MathLib_Atan" xml:space="preserve">
    <value>逆正接を求めます。</value>
  </data>
  <data name="MathLib_Atan2" xml:space="preserve">
    <value>&lt;y&gt; と &lt;x&gt; からラジアンを求めます。</value>
  </data>
  <data name="MathLib_Ceiling" xml:space="preserve">
    <value>値の切り上げを求めます。</value>
  </data>
  <data name="MathLib_Combination" xml:space="preserve">
    <value>組み合わせを求めます。</value>
  </data>
  <data name="MathLib_Cos" xml:space="preserve">
    <value>余弦を求めます。</value>
  </data>
  <data name="MathLib_Cosh" xml:space="preserve">
    <value>双曲線余弦を求めます。</value>
  </data>
  <data name="MathLib_E" xml:space="preserve">
    <value>ネイピア数（自然対数の底）を参照します。</value>
  </data>
  <data name="MathLib_Factorial" xml:space="preserve">
    <value>階乗を求めます。</value>
  </data>
  <data name="MathLib_Floor" xml:space="preserve">
    <value>値の切り下げを求めます。</value>
  </data>
  <data name="MathLib_Max" xml:space="preserve">
    <value>最大値を求めます。</value>
  </data>
  <data name="MathLib_Min" xml:space="preserve">
    <value>最小値を求めます。</value>
  </data>
  <data name="MathLib_Permutation" xml:space="preserve">
    <value>順列を求めます。</value>
  </data>
  <data name="MathLib_PI" xml:space="preserve">
    <value>円周率を参照します。</value>
  </data>
  <data name="MathLib_Polynomial" xml:space="preserve">
    <value>多項式の解を計算します。</value>
  </data>
  <data name="MathLib_Round" xml:space="preserve">
    <value>値の四捨五入を求めます。</value>
  </data>
  <data name="MathLib_Sign" xml:space="preserve">
    <value>値の負号が正か負かを表す +/- 1 を求めます。</value>
  </data>
  <data name="MathLib_Sin" xml:space="preserve">
    <value>正弦を求めます。</value>
  </data>
  <data name="MathLib_Sinh" xml:space="preserve">
    <value>双曲線正弦を求めます。</value>
  </data>
  <data name="MathLib_Sqrt" xml:space="preserve">
    <value>平方根を求めます。</value>
  </data>
  <data name="MathLib_Tan" xml:space="preserve">
    <value>正接を求めます。</value>
  </data>
  <data name="MathLib_Tanh" xml:space="preserve">
    <value>双曲線正接を求めます。</value>
  </data>
  <data name="MathLib_ToAngle" xml:space="preserve">
    <value>ラジアンから角度を求めます。</value>
  </data>
  <data name="MathLib_ToRadian" xml:space="preserve">
    <value>角度からラジアンを求めます。</value>
  </data>
  <data name="MathLib_Truncate" xml:space="preserve">
    <value>値を 0 に近い方に丸めた値を求めます。</value>
  </data>
  <data name="MathNumerics_Clear" xml:space="preserve">
    <value>Matrix をクリアします。</value>
  </data>
  <data name="MathNumerics_CreateL" xml:space="preserve">
    <value>double 型のリストをもとに Vector を作成します。</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf1Column" xml:space="preserve">
    <value>double 型のリストをもとに１列の Matrix を作成します。</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf1Row" xml:space="preserve">
    <value>double 型のリストをもとに１行の Matrix を作成します。</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf2Columns" xml:space="preserve">
    <value>double 型のリストをもとに２列の Matrix を作成します。</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf2Rows" xml:space="preserve">
    <value>double 型のリストをもとに２行の Matrix を作成します。</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf3Columns" xml:space="preserve">
    <value>double 型のリストをもとに３列の Matrix を作成します。</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf3Rows" xml:space="preserve">
    <value>double 型のリストをもとに３行の Matrix を作成します。</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf4Columns" xml:space="preserve">
    <value>double 型のリストをもとに４列の Matrix を作成します。</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf4Rows" xml:space="preserve">
    <value>double 型のリストをもとに４行の Matrix を作成します。</value>
  </data>
  <data name="MathNumerics_CreateMatrixOfTerm" xml:space="preserve">
    <value>&lt;term&gt; 次数をもとに &lt;len&gt; 行の Matrix を作成します。</value>
  </data>
  <data name="MathNumerics_CreateV" xml:space="preserve">
    <value>Vector をもとに Vector を作成します。</value>
  </data>
  <data name="MathNumerics_CreateVectorFromColumn" xml:space="preserve">
    <value>matrix の列から Vector を作成します。</value>
  </data>
  <data name="MathNumerics_CreateVectorFromRow" xml:space="preserve">
    <value>matrix の行から Vector を作成します。</value>
  </data>
  <data name="MathNumerics_Dot" xml:space="preserve">
    <value>内積を求めます。</value>
  </data>
  <data name="MathNumerics_Inverse" xml:space="preserve">
    <value>逆行列を計算します。</value>
  </data>
  <data name="MathNumerics_MatrixToString" xml:space="preserve">
    <value>Matrix を文字列に変換します。</value>
  </data>
  <data name="MathNumerics_Mean" xml:space="preserve">
    <value>平均を計算します。</value>
  </data>
  <data name="MathNumerics_Median" xml:space="preserve">
    <value>中央値を計算します。</value>
  </data>
  <data name="MathNumerics_OrderStatistic" xml:space="preserve">
    <value>順序統計量を計算します。</value>
  </data>
  <data name="MathNumerics_PopulationStandardDeviation" xml:space="preserve">
    <value>母標準偏差を計算します。</value>
  </data>
  <data name="MathNumerics_PopulationVariance" xml:space="preserve">
    <value>母分散を計算します。</value>
  </data>
  <data name="MathNumerics_PseudoInverse" xml:space="preserve">
    <value>擬似逆行列を計算します。</value>
  </data>
  <data name="MathNumerics_StandardDeviation" xml:space="preserve">
    <value>標本標準偏差を計算します。</value>
  </data>
  <data name="MathNumerics_Variance" xml:space="preserve">
    <value>標本分散を計算します。</value>
  </data>
  <data name="Media_CaptureOutGifAnimation" xml:space="preserve">
    <value>動画をキャプチャしてGIFアニメーションを作成します。</value>
  </data>
  <data name="Media_Capture_all" xml:space="preserve">
    <value>１本の動画を元にGIFアニメーションを作成します。</value>
  </data>
  <data name="Media_Capture_all_d_d" xml:space="preserve">
    <value>動画の指定位置から指定量のGIFアニメーションを作成します。</value>
  </data>
  <data name="Media_Capture_cm" xml:space="preserve">
    <value>現在の動画のシーンをビットマップに変換します。</value>
  </data>
  <data name="Media_Capture_cm_d" xml:space="preserve">
    <value>指定のフレームの動画のシーンをビットマップに変換します。</value>
  </data>
  <data name="Media_Seek" xml:space="preserve">
    <value>指定のフレームにシークします。</value>
  </data>
  <data name="Mod" xml:space="preserve">
    <value>&lt;n1&gt; の &lt;n2&gt; による剰余を参照します。</value>
  </data>
  <data name="Mul" xml:space="preserve">
    <value>&lt;base&gt;を&lt;sample&gt;リストの値だけ積算します。</value>
  </data>
  <data name="Not" xml:space="preserve">
    <value>&lt;sample&gt;の bool 値を反転します。</value>
  </data>
  <data name="Or" xml:space="preserve">
    <value>&lt;sample&gt;リストのいずれかが true かを判定します。</value>
  </data>
  <data name="Pow" xml:space="preserve">
    <value>&lt;p&gt; を指数に基数 &lt;n&gt; のべき乗を参照します。</value>
  </data>
  <data name="Rand" xml:space="preserve">
    <value>&lt;min&gt; から &lt;max&gt; の間の乱数を参照します。</value>
  </data>
  <data name="RandomLib_PMRand" xml:space="preserve">
    <value>値をランダムで +/- の何れかで求めます。</value>
  </data>
  <data name="RandomLib_PmRandomDouble" xml:space="preserve">
    <value>0 から 1.0 の間の乱数をランダムで +/- の何れかで求めます。</value>
  </data>
  <data name="RandomLib_PmRandomMulDouble" xml:space="preserve">
    <value>0 から value の間の乱数をランダムで +/- のいずれかで求めます。</value>
  </data>
  <data name="RandomLib_ProbabilityTrue" xml:space="preserve">
    <value>100 * &lt;probability&gt; の百分率で True を返します。</value>
  </data>
  <data name="RandomLib_RandomDouble" xml:space="preserve">
    <value>0 から 1.0 の間の乱数を求めます。</value>
  </data>
  <data name="RandomLib_RandomMulDouble" xml:space="preserve">
    <value>0 から 1.0 の間の乱数をランダムで +/- のいずれかで求めます。</value>
  </data>
  <data name="RandomLib_RandPMRand" xml:space="preserve">
    <value>&lt;min&gt; から &lt;max&gt; のランダムな値をランダムで +/- のいずれかで求めます。</value>
  </data>
  <data name="ReturnVoidFor" xml:space="preserve">
    <value>&lt;from&gt; から &lt;to&gt; 未満までをインデックスにループし、インデックスを仮引数に &lt;invoke&gt; をコールします。</value>
  </data>
  <data name="SA_SetWorkCanvasBG" xml:space="preserve">
    <value>作業領域に背景にイメージをセットします。</value>
  </data>
  <data name="SetExitCode" xml:space="preserve">
    <value>アプリケーションの終了コードをセットし、アプリケーションを終了します。</value>
  </data>
  <data name="SetListIndex" xml:space="preserve">
    <value>&lt;sample&gt; リストの &lt;index&gt; 番目の要素に &lt;n&gt; を代入します。</value>
  </data>
  <data name="SetVariable" xml:space="preserve">
    <value>変数に値を代入します。</value>
  </data>
  <data name="SetVariableToIndex" xml:space="preserve">
    <value>変数リストの &lt;index&gt; 番目の要素に &lt;n&gt; を代入します。</value>
  </data>
  <data name="StatisticsLib_MaxInTheList" xml:space="preserve">
    <value>&lt;sample&gt;リスト中の最大の要素の値を参照します。</value>
  </data>
  <data name="StatisticsLib_MinInTheList" xml:space="preserve">
    <value>&lt;sample&gt;リスト中の最小の要素の値を参照します。</value>
  </data>
  <data name="StatisticsLib_NormalizeAbsWidthOfValue" xml:space="preserve">
    <value>&lt;sample&gt;リストの要素の値の幅の絶対値を求め、比率を維持したまま0～1.0の間に収めます。</value>
  </data>
  <data name="StatisticsLib_NormalizeWidthOfValue" xml:space="preserve">
    <value>&lt;sample&gt;リストの要素の値の幅を求め、比率を維持したまま0～1.0の間に収めます。</value>
  </data>
  <data name="StatisticsLib_SquaredDifference" xml:space="preserve">
    <value>&lt;n1&gt; と &lt;n2&gt; の二乗差分を求めます。&lt;n1&gt; - &lt;n2&gt; の2乗</value>
  </data>
  <data name="StatisticsLib_WidthOfValueInTheList" xml:space="preserve">
    <value>&lt;sample&gt;リスト中の最小値と最大値の距離を参照します。</value>
  </data>
  <data name="String_GetEnter" xml:space="preserve">
    <value>改行(&lt;/n&gt;)</value>
  </data>
  <data name="String_GetEnter2" xml:space="preserve">
    <value>改行(&lt;/r&gt;)</value>
  </data>
  <data name="String_IndexOf" xml:space="preserve">
    <value>&lt;str&gt;文字列にある &lt;value&gt; 文字の位置を参照します。</value>
  </data>
  <data name="String_IndexOf_s" xml:space="preserve">
    <value>&lt;str&gt;文字列にある&lt;value&gt;文字列の位置を参照します。</value>
  </data>
  <data name="String_IndexOf_s_n" xml:space="preserve">
    <value>&lt;str&gt;文字列の&lt;index&gt;文字以降にある&lt;value&gt;文字列の位置を参照します。</value>
  </data>
  <data name="String_IndexOf_s_n_n" xml:space="preserve">
    <value>&lt;str&gt;文字列の&lt;index&gt;文字以降&lt;length&gt;文字内にある&lt;value&gt;文字列の位置を参照します。</value>
  </data>
  <data name="String_Insert" xml:space="preserve">
    <value>&lt;str&gt;文字列の &lt;startIndex&gt; 文字目に &lt;value&gt; 文字列を挿入します。</value>
  </data>
  <data name="String_IsMatch" xml:space="preserve">
    <value>&lt;input&gt; 文字列を &lt;pattern&gt;正規表現で判定します。</value>
  </data>
  <data name="String_Match" xml:space="preserve">
    <value>&lt;input&gt; 文字列の &lt;pattern&gt;正規表現による一致を参照します。</value>
  </data>
  <data name="String_MatchCollection" xml:space="preserve">
    <value>&lt;input&gt; 文字列の &lt;pattern&gt;正規表現によるすべての一致を参照します。</value>
  </data>
  <data name="String_NewLine" xml:space="preserve">
    <value>改行</value>
  </data>
  <data name="String_Remove" xml:space="preserve">
    <value>&lt;str&gt;文字列の &lt;startIndex&gt; 文字目から &lt;length&gt; 文字を削除します。</value>
  </data>
  <data name="String_Replace" xml:space="preserve">
    <value>&lt;str&gt;文字列の &lt;oldStr&gt; を &lt;newStr&gt; に置換します。</value>
  </data>
  <data name="String_Split" xml:space="preserve">
    <value>&lt;str&gt;文字列を &lt;separator&gt; 文字で分割します。</value>
  </data>
  <data name="String_SplitFromString" xml:space="preserve">
    <value>&lt;str&gt;文字列を &lt;separator&gt; 文字列で分割します。</value>
  </data>
  <data name="String_StartsWith" xml:space="preserve">
    <value>&lt;str&gt;文字列の先頭から &lt;value&gt; 文字列の一致を判定します。</value>
  </data>
  <data name="String_Substring" xml:space="preserve">
    <value>&lt;str&gt;文字列の &lt;startIndex&gt; 文字目から &lt;length&gt; 文字を参照します。</value>
  </data>
  <data name="String_ToDouble" xml:space="preserve">
    <value>文字列を double 型の値に変換します。</value>
  </data>
  <data name="String_ToFloat" xml:space="preserve">
    <value>文字列を float 型の値に変換します。</value>
  </data>
  <data name="String_ToInt" xml:space="preserve">
    <value>文字列を int 型の値に変換します。</value>
  </data>
  <data name="String_ToLong" xml:space="preserve">
    <value>文字列を long 型の値に変換します。</value>
  </data>
  <data name="String_ToLower" xml:space="preserve">
    <value>文字列中の小文字を小文字に変換します。</value>
  </data>
  <data name="String_ToUpper" xml:space="preserve">
    <value>文字列中の小文字を大文字に変換します。</value>
  </data>
  <data name="String_Trim" xml:space="preserve">
    <value>文字列の頭と末の空白を削除します。</value>
  </data>
  <data name="String_TrimEnd" xml:space="preserve">
    <value>文字列末の空白を削除します。</value>
  </data>
  <data name="String_TrimStart" xml:space="preserve">
    <value>文字列の頭の空白を削除します。</value>
  </data>
  <data name="Sub" xml:space="preserve">
    <value>&lt;base&gt;を&lt;sample&gt;リストの値だけ減算します。</value>
  </data>
  <data name="Subroutine" xml:space="preserve">
    <value>&lt;call list&gt;リストのノードを順次実行します。何でもリンクする場合は object 型で作成します。最後の接続ノードから返された値を返します。</value>
  </data>
  <data name="Sum" xml:space="preserve">
    <value>リストの値を加算します。</value>
  </data>
  <data name="Sum_Func" xml:space="preserve">
    <value>それまでの加算値（&lt;base&gt;を初期値とする）を仮引数に &lt;sample&gt;リストに登録された関数をコールし、その返り値を加算します。</value>
  </data>
  <data name="Union_Add" xml:space="preserve">
    <value>集合 A に集合 B の要素を追加した集合を求めます。</value>
  </data>
  <data name="Union_And" xml:space="preserve">
    <value>集合 A と集合 B の積集合を求めます。</value>
  </data>
  <data name="Union_AndCount" xml:space="preserve">
    <value>積集合の数を求めます。</value>
  </data>
  <data name="Union_Dice" xml:space="preserve">
    <value>Dice 係数を求めます。</value>
  </data>
  <data name="Union_IfEq" xml:space="preserve">
    <value>集合 A と集合 B が同じ集合かを判定します。</value>
  </data>
  <data name="Union_IfNotEq" xml:space="preserve">
    <value>集合 A と集合 B が同じ集合ではないことを判定します。</value>
  </data>
  <data name="Union_IfNotSubset" xml:space="preserve">
    <value>集合 B が集合 A の部分集合ではないことを判定します。</value>
  </data>
  <data name="Union_IfNotTrueSubset" xml:space="preserve">
    <value>集合 B が集合 A の真部分集合ではないことを判定します。</value>
  </data>
  <data name="Union_IfSubset" xml:space="preserve">
    <value>集合 B が集合 A の部分集合かを判定します。</value>
  </data>
  <data name="Union_IfTrueSubset" xml:space="preserve">
    <value>集合 B が集合 A の真部分集合かを判定します。</value>
  </data>
  <data name="Union_Jaccard" xml:space="preserve">
    <value>Jaccard 係数を求めます。</value>
  </data>
  <data name="Union_Or" xml:space="preserve">
    <value>集合 A と集合 B の和集合を求めます。</value>
  </data>
  <data name="Union_OrCount" xml:space="preserve">
    <value>和集合の数を求めます。</value>
  </data>
  <data name="Union_Simpson" xml:space="preserve">
    <value>Simpson 係数を求めます。</value>
  </data>
  <data name="Union_Sub" xml:space="preserve">
    <value>集合 A から集合 B の要素を削除した集合を求めます。</value>
  </data>
</root>