<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Abs" xml:space="preserve">
    <value>Refers to the absolute value of the &lt;n&gt; value.</value>
  </data>
  <data name="Analyze_MetropolisMethod" xml:space="preserve">
    <value>Performs the metropolis method. &lt;random&gt; A random sample. &lt;objective&gt; Objective function. &lt;evaluate&gt; Evaluation function. &lt;changeEvent&gt; Event that occurs when switching.</value>
  </data>
  <data name="And" xml:space="preserve">
    <value>Determines if the &lt;sample&gt; list is all true.</value>
  </data>
  <data name="Append" xml:space="preserve">
    <value>Append element &lt;n&gt; to the &lt;sample&gt; list.</value>
  </data>
  <data name="AppendVariableList" xml:space="preserve">
    <value>Append element &lt;n&gt; to the variable list.</value>
  </data>
  <data name="ArgumentForced" xml:space="preserve">
    <value>If checked, the argument cache is ignored. Necessary when the value of the argument reference destination changes dynamically. However, the cache is cleared every time you call back.</value>
  </data>
  <data name="AssignmentFunc" xml:space="preserve">
    <value>Define the function.</value>
  </data>
  <data name="CallerArgument" xml:space="preserve">
    <value>Refer to the dummy argument.</value>
  </data>
  <data name="CallFile" xml:space="preserve">
    <value>Executes the file specified by &lt;path&gt;. You can specify execution parameters in the &lt;arguments&gt; list. &lt;redirect&gt; Specify redirect.</value>
  </data>
  <data name="Confirmation" xml:space="preserve">
    <value>Confirmation</value>
  </data>
  <data name="ConfirmationAllDelete" xml:space="preserve">
    <value>Are you sure you want to delete them all?</value>
  </data>
  <data name="ConfirmationDelete" xml:space="preserve">
    <value>Are you sure you want to delete?</value>
  </data>
  <data name="ConsoleOut" xml:space="preserve">
    <value>Output &lt;n&gt; to the console.</value>
  </data>
  <data name="Contains" xml:space="preserve">
    <value>Returns True if the &lt;sample&gt; list contains an element that matches &lt;n&gt;. Returns False if there is none.</value>
  </data>
  <data name="Count" xml:space="preserve">
    <value>References the number of elements in the &lt;sample&gt; list.</value>
  </data>
  <data name="CreateVariable" xml:space="preserve">
    <value>Create a variable and create a node with its reference.</value>
  </data>
  <data name="CreateVariableFunc" xml:space="preserve">
    <value>Create an event variable and create a node with its reference.</value>
  </data>
  <data name="CreateVariableList" xml:space="preserve">
    <value>Create a variable list and create a node with its reference.</value>
  </data>
  <data name="Dec" xml:space="preserve">
    <value>Decrement &lt;n&gt;.</value>
  </data>
  <data name="DiagnosticsLib_GetListOfRunningProcesses" xml:space="preserve">
    <value>Refer to the list of running process names. Set &lt;distinct&gt; to True to combine the same names.</value>
  </data>
  <data name="Div" xml:space="preserve">
    <value>Divides &lt;base&gt; by the value in the &lt;sample&gt; list.</value>
  </data>
  <data name="EnvironmentLib_CommandLineArgs" xml:space="preserve">
    <value>Returns a list of command line arguments.</value>
  </data>
  <data name="EnvironmentLib_CommandLineOption" xml:space="preserve">
    <value>Returns a list of command line arguments starting with "-".</value>
  </data>
  <data name="EnvironmentLib_CommandLineParam" xml:space="preserve">
    <value>Returns a list of command line arguments that do not start with "-".</value>
  </data>
  <data name="EnvironmentLib_GetEnvironmentVariable" xml:space="preserve">
    <value>Refer to the list of environment variables.</value>
  </data>
  <data name="EnvironmentLib_MachineName" xml:space="preserve">
    <value>Browse to the machine name.</value>
  </data>
  <data name="EnvironmentLib_ReplaceEnvironmentVariable" xml:space="preserve">
    <value>Replace "%environment variable%" in the string with the environment variable.</value>
  </data>
  <data name="EnvironmentLib_UserName" xml:space="preserve">
    <value>Browse to your user name.</value>
  </data>
  <data name="Eq" xml:space="preserve">
    <value>&lt;n1&gt; == &lt;n2&gt; is judged.</value>
  </data>
  <data name="FileLib_CloseReadStream" xml:space="preserve">
    <value>&lt;stream&gt; Discard the input file stream.</value>
  </data>
  <data name="FileLib_CloseWriteStream" xml:space="preserve">
    <value>&lt;stream&gt; Discard the output file stream.</value>
  </data>
  <data name="FileLib_Combine" xml:space="preserve">
    <value>Combine multiple strings into one path. If &lt;slashSeparate&gt; is True, separate directories with / instead of &lt;//&gt;.</value>
  </data>
  <data name="FileLib_ConsoleOutBoolList" xml:space="preserve">
    <value>Print a bool type list to the console.</value>
  </data>
  <data name="FileLib_ConsoleOutDoubleList" xml:space="preserve">
    <value>Outputs a double type list to the console.</value>
  </data>
  <data name="FileLib_ConsoleOutIntList" xml:space="preserve">
    <value>Prints an int type list to the console.</value>
  </data>
  <data name="FileLib_ConsoleOutLongList" xml:space="preserve">
    <value>Outputs a long type list to the console.</value>
  </data>
  <data name="FileLib_ConsoleOutStringList" xml:space="preserve">
    <value>Output a string list to the console.</value>
  </data>
  <data name="FileLib_Copy" xml:space="preserve">
    <value>Copy the file.</value>
  </data>
  <data name="FileLib_CreateDirectory" xml:space="preserve">
    <value>If &lt;add serial number&gt; is True and a directory with the same name already exists, it will be created by adding the number from 2 to the end.</value>
  </data>
  <data name="FileLib_CreateReadStreamVariable" xml:space="preserve">
    <value>&lt;stream&gt; Create or reference a file stream variable for input.</value>
  </data>
  <data name="FileLib_CreateWriteStreamVariable" xml:space="preserve">
    <value>&lt;stream&gt; Create or reference a file stream variable for output.</value>
  </data>
  <data name="FileLib_Delete" xml:space="preserve">
    <value>Delete the file.</value>
  </data>
  <data name="FileLib_DirectoryExists" xml:space="preserve">
    <value>Returns True if the directory exists.</value>
  </data>
  <data name="FileLib_Exists" xml:space="preserve">
    <value>Returns True if the file exists.</value>
  </data>
  <data name="FileLib_FileOpenAddWriteAndClose" xml:space="preserve">
    <value>Outputs &lt;str&gt; text to the &lt;fileName&gt; file. If &lt;lineMode&gt; is True, wraps after output. Create the &lt;fileName&gt; file if it does not exist.</value>
  </data>
  <data name="FileLib_ForeachFilesInvoke" xml:space="preserve">
    <value>&lt;search pattern&gt; Search the file name with the pattern and call &lt;event&gt; with the found file name as a dummy argument. If &lt;all directories&gt; is True, the sub directories and below will be searched recursively.</value>
  </data>
  <data name="FileLib_GetCurrentDirectory" xml:space="preserve">
    <value>Refers to the current current directory.</value>
  </data>
  <data name="FileLib_GetDirectories" xml:space="preserve">
    <value>Browse the list of subdirectories in the &lt;path&gt; directory. If &lt;all directories&gt; is True, the sub directories and below will be searched recursively. For &lt;ignore list&gt;, specify the directory names to ignore.</value>
  </data>
  <data name="FileLib_GetDirectoryName" xml:space="preserve">
    <value>Browse the directory name from the path.</value>
  </data>
  <data name="FileLib_GetExtension" xml:space="preserve">
    <value>Browse the extension from the path.</value>
  </data>
  <data name="FileLib_GetFileName" xml:space="preserve">
    <value>Browse the file name from the path.</value>
  </data>
  <data name="FileLib_GetFileNameWithoutExtension" xml:space="preserve">
    <value>Refers to the file name without the path extension.</value>
  </data>
  <data name="FileLib_GetFiles" xml:space="preserve">
    <value>&lt;search pattern&gt; Search for file names in the pattern. If &lt;all directories&gt; is True, the sub directories and below will be searched recursively.</value>
  </data>
  <data name="FileLib_GetFileSize" xml:space="preserve">
    <value>Refers to the file size.</value>
  </data>
  <data name="FileLib_GetFilesSize" xml:space="preserve">
    <value>&lt;search pattern&gt; Search the file with the pattern and refer to the total file size. If &lt;all directories&gt; is True, the sub directories and below will be searched recursively.</value>
  </data>
  <data name="FileLib_GetFilsFromDirectories" xml:space="preserve">
    <value>Browse the subdirectories list from the directories in the &lt;directories&gt; directory list. If &lt;all directories&gt; is True, the sub directories and below will be searched recursively. For &lt;ignore list&gt;, specify the directory names to ignore.</value>
  </data>
  <data name="FileLib_GetFullPath" xml:space="preserve">
    <value>Reference absolute path from path.</value>
  </data>
  <data name="FileLib_GetPathRoot" xml:space="preserve">
    <value>Reference the root directory name from the path.</value>
  </data>
  <data name="FileLib_GetReadStream" xml:space="preserve">
    <value>Create a file stream for input.</value>
  </data>
  <data name="FileLib_GetWriteStream" xml:space="preserve">
    <value>&lt;stream&gt; Create a file stream for output. If &lt;append&gt; is set to True, it will be created for additional writing.</value>
  </data>
  <data name="FileLib_HasExtension" xml:space="preserve">
    <value>Returns True if the path contains an extension.</value>
  </data>
  <data name="FileLib_IsPathRooted" xml:space="preserve">
    <value>Returns True if the path contains a route.</value>
  </data>
  <data name="FileLib_Move" xml:space="preserve">
    <value>Change (or move) &lt;sourceFileName&gt; to &lt;destFileName&gt;.</value>
  </data>
  <data name="FileLib_PathListToDirectoryList" xml:space="preserve">
    <value>Converts the path list into a directory list.</value>
  </data>
  <data name="FileLib_PathListToExtensionList" xml:space="preserve">
    <value>Converts the path list into an extension list.</value>
  </data>
  <data name="FileLib_PathListToFileList" xml:space="preserve">
    <value>Converts the path list into a file name list.</value>
  </data>
  <data name="FileLib_SetCurrentDirectory" xml:space="preserve">
    <value>Change the current current directory.</value>
  </data>
  <data name="FileLib_StreamReadLine" xml:space="preserve">
    <value>&lt;stream&gt; Input a one-line character string from the input file stream, call &lt;invoke&gt; with the contents as a dummy argument, and return the number of lines. If &lt;autoClose&gt; is True, discard the file stream after input.</value>
  </data>
  <data name="FileLib_StreamWrite" xml:space="preserve">
    <value>Outputs a &lt;str&gt; string to the output file stream. If &lt;lineMode&gt; is True, wraps after output. If &lt;autoClose&gt; is True, discard the file stream after output.</value>
  </data>
  <data name="For" xml:space="preserve">
    <value>Loop from &lt;from&gt; to less than &lt;to&gt; into the index and call &lt;func&gt; with the index as the dummy argument.</value>
  </data>
  <data name="Foreach" xml:space="preserve">
    <value>&lt;func&gt; is called with the elements of the &lt;sample&gt; list as dummy arguments.</value>
  </data>
  <data name="Ge" xml:space="preserve">
    <value>Judges (n1) &gt;= (n2).</value>
  </data>
  <data name="GetListIndex" xml:space="preserve">
    <value>References the &lt;index&gt; th element of the &lt;sample&gt; list.</value>
  </data>
  <data name="GetListLast" xml:space="preserve">
    <value>Refers to the last element in the &lt;sample&gt; list.</value>
  </data>
  <data name="GetVariable" xml:space="preserve">
    <value>Reference the variable.</value>
  </data>
  <data name="GetVariableFromIndex" xml:space="preserve">
    <value>Refers to the &lt;index&gt;th element of the variable list.</value>
  </data>
  <data name="Graph_CreateErrorList" xml:space="preserve">
    <value>Create an error list that adds errorValue to each value based on the list.</value>
  </data>
  <data name="Graph_CreatePlotInfo" xml:space="preserve">
    <value>Create the information to be output on the graph.</value>
  </data>
  <data name="Graph_MakePlotList" xml:space="preserve">
    <value>Create a list that will be output to the graph using a callback.</value>
  </data>
  <data name="Graph_OutPlot" xml:space="preserve">
    <value>Overlays any number of graphs.</value>
  </data>
  <data name="Gt" xml:space="preserve">
    <value>Judges that (n1)&gt; (n2).</value>
  </data>
  <data name="If" xml:space="preserve">
    <value>Returns &lt;return true&gt; when &lt;conditions&gt; is True. If False, &lt;return false&gt; is returned.</value>
  </data>
  <data name="If_Action" xml:space="preserve">
    <value>Call &lt;func true&gt; when &lt;conditions&gt; is True. If it is False, call &lt;func false&gt;.</value>
  </data>
  <data name="If_Func" xml:space="preserve">
    <value>Call &lt;func true&gt; when &lt;conditions&gt; is True. If it is False, call &lt;func false&gt;. The result will be the return value.</value>
  </data>
  <data name="Image_ColorExtraction" xml:space="preserve">
    <value>Create an image by separating the specified image with color elements.</value>
  </data>
  <data name="Image_Create3x3Filter" xml:space="preserve">
    <value>Create a process with a spatial filter.</value>
  </data>
  <data name="Image_Create3x3FilterDiff" xml:space="preserve">
    <value>Create a difference process with the processing result of the hub.</value>
  </data>
  <data name="Image_Create3x3FilterHub" xml:space="preserve">
    <value>Create a hub to group multiple IKernel3x3RGBA together.</value>
  </data>
  <data name="Image_CreateAverageFilter" xml:space="preserve">
    <value>Create a smoothing (3x3 Averaging filter) process.</value>
  </data>
  <data name="Image_CreateCAdaptiveBinarizationRGB" xml:space="preserve">
    <value>Create an adaptive binarization process.</value>
  </data>
  <data name="Image_CreateCBinarizationRGB" xml:space="preserve">
    <value>Create a binarization process.</value>
  </data>
  <data name="Image_CreateCEventFuncRGB" xml:space="preserve">
    <value>Create an arbitrary process for each pixel value.</value>
  </data>
  <data name="Image_CreateCGammaCorrection" xml:space="preserve">
    <value>Create a gamma correction process.</value>
  </data>
  <data name="Image_CreateCGammaCorrectionRGB" xml:space="preserve">
    <value>Create a gamma correction process for each RGB.</value>
  </data>
  <data name="Image_CreateCGlayScale" xml:space="preserve">
    <value>Create a grayscale process.</value>
  </data>
  <data name="Image_CreateCMulRateRGB" xml:space="preserve">
    <value>Create a process to multiply each pixel value by a constant.</value>
  </data>
  <data name="Image_CreateContrastRGB" xml:space="preserve">
    <value>Create a contrast process.</value>
  </data>
  <data name="Image_CreateCPixelOutRPGAHub" xml:space="preserve">
    <value>Create a hub to combine multiple IRGBAPixelOut RPGAs.</value>
  </data>
  <data name="Image_CreateCSubAverageRGB" xml:space="preserve">
    <value>Create a process that subtracts each pixel value by the average of the pixel values.</value>
  </data>
  <data name="Image_CreateDilationFilter" xml:space="preserve">
    <value>Create the inflation process.</value>
  </data>
  <data name="Image_CreateErosionFilter" xml:space="preserve">
    <value>Create a shrink process.</value>
  </data>
  <data name="Image_CreateFirstDerivativeFilter" xml:space="preserve">
    <value>Create contour extraction (3x3 first derivative filter) processing.</value>
  </data>
  <data name="Image_CreateFreeFilter_ld" xml:space="preserve">
    <value>Set up the kernel for the spatial filter. Since it is a 3x3 kernel, the necessary information is 9 coefficients.</value>
  </data>
  <data name="Image_CreateFreeFilter_ld_d" xml:space="preserve">
    <value>Set up the kernel for the spatial filter. Since it is a 3x3 kernel, the necessary information is 9 coefficients. Each coefficient is set by dividing by div.</value>
  </data>
  <data name="Image_CreateGaussianFilter" xml:space="preserve">
    <value>Create a smoothing (3x3 Gaussian filter) process.</value>
  </data>
  <data name="Image_CreateMedianFilter" xml:space="preserve">
    <value>Create a smoothing (3x3 Median filter) process.</value>
  </data>
  <data name="Image_CreateNegativePositiveReversalRGB" xml:space="preserve">
    <value>Negative/positive reversal processing is created.</value>
  </data>
  <data name="Image_CreatePrewittFilter" xml:space="preserve">
    <value>Create the contour extraction (3x3 Prewitt filter) process.</value>
  </data>
  <data name="Image_CreateRGBA3x3FilteringProc" xml:space="preserve">
    <value>Create a 3✕3 convolution process.</value>
  </data>
  <data name="Image_CreateSobelFilter" xml:space="preserve">
    <value>Create a contour extraction (3x3 Sobel filter) process.</value>
  </data>
  <data name="Image_CreateTransparent" xml:space="preserve">
    <value>Create transparency.</value>
  </data>
  <data name="Image_CreateUnsharpMasking" xml:space="preserve">
    <value>Creates a sharpening (3x3 unsharp masking) process.</value>
  </data>
  <data name="Image_CreateWhiteMaskFilter" xml:space="preserve">
    <value>Remove the white color.</value>
  </data>
  <data name="Image_CRTGamma2dot2" xml:space="preserve">
    <value>CRT gamma 2.2</value>
  </data>
  <data name="Image_GammaCollection2dot2" xml:space="preserve">
    <value>gamma correction 1/2.2</value>
  </data>
  <data name="Image_GammaCorrection" xml:space="preserve">
    <value>Gamma correction.</value>
  </data>
  <data name="Image_GetAverageNumberOfPixels" xml:space="preserve">
    <value>Gets the average pixel value of the image.</value>
  </data>
  <data name="Image_GetHistogram" xml:space="preserve">
    <value>Gets the image histogram.</value>
  </data>
  <data name="Image_GetMaxNumberOfPixels" xml:space="preserve">
    <value>Maximum number of pixel value distribution of image Gets the number of existing pixel value distribution. However, the alpha value is ignored.</value>
  </data>
  <data name="Image_GetPixelHeight" xml:space="preserve">
    <value>Gets the height of the image.</value>
  </data>
  <data name="Image_GetPixelWidth" xml:space="preserve">
    <value>Gets the width of the image.</value>
  </data>
  <data name="Image_GlayScale" xml:space="preserve">
    <value>Converts the image to grayscale.</value>
  </data>
  <data name="Image_Kernel3x3RGBAProcessing" xml:space="preserve">
    <value>Handles a 3*3 convolution.</value>
  </data>
  <data name="Image_OpenImage" xml:space="preserve">
    <value>Read images (BMP, JPEG, PNG, TIFF, Windows Media Photo, GIF) from files.</value>
  </data>
  <data name="Image_OpenMedia" xml:space="preserve">
    <value>Open the video.</value>
  </data>
  <data name="Image_OutHistogram" xml:space="preserve">
    <value>Display the histogram. It is possible to specify gray scale and RGB.</value>
  </data>
  <data name="Image_OutImageFile" xml:space="preserve">
    <value>Save the image to a file in the specified format.</value>
  </data>
  <data name="Image_OutImageWindow" xml:space="preserve">
    <value>Receives a BitmapImage and displays the image.</value>
  </data>
  <data name="Image_OutMediaWindow" xml:space="preserve">
    <value>Open the window and play the video.</value>
  </data>
  <data name="Image_PixelOutRGBAProcessing" xml:space="preserve">
    <value>Pixel processing is performed using an interface for processing RGB and transparent colors and an interface for processing the results.</value>
  </data>
  <data name="Image_Scaling" xml:space="preserve">
    <value>Scales the image.</value>
  </data>
  <data name="Image_ScreenCapture" xml:space="preserve">
    <value>Capture screen</value>
  </data>
  <data name="Image_Synthesis" xml:space="preserve">
    <value>Combine the images.</value>
  </data>
  <data name="Inc" xml:space="preserve">
    <value>Increment &lt;n&gt;.</value>
  </data>
  <data name="Invoke" xml:space="preserve">
    <value>Call &lt;invoke&gt;.</value>
  </data>
  <data name="InvokeWithArg" xml:space="preserve">
    <value>Call &lt;invoke&gt; with &lt;argument&gt; as formal argument.</value>
  </data>
  <data name="Ip_GetContents" xml:space="preserve">
    <value>Browse HTTP content.</value>
  </data>
  <data name="Ip_GetHeaders" xml:space="preserve">
    <value>Refers to the HTTP header.</value>
  </data>
  <data name="Ip_GetHostEntry" xml:space="preserve">
    <value>The address information is referenced from the host name.</value>
  </data>
  <data name="Ip_GetHostName" xml:space="preserve">
    <value>Reference the host name from the address.</value>
  </data>
  <data name="Ip_GetMyHostAddress" xml:space="preserve">
    <value>Browse to the host address.</value>
  </data>
  <data name="Ip_GetMyHostName" xml:space="preserve">
    <value>Browse to the host name.</value>
  </data>
  <data name="Ip_WebAPI" xml:space="preserve">
    <value>Invokes a Web API command.</value>
  </data>
  <data name="IsPublicExecute" xml:space="preserve">
    <value>Register in the entry list that can be executed by clicking the "Execute" button.</value>
  </data>
  <data name="Le" xml:space="preserve">
    <value>Judges (n1) &lt;= (n2).</value>
  </data>
  <data name="ListFactory_Distinct" xml:space="preserve">
    <value>Combines elements with the same contents in a list of string type.</value>
  </data>
  <data name="ListFactory_DoubleCount" xml:space="preserve">
    <value>Counts how many elements of the double type &lt;sample&gt; list have the same value as &lt;value&gt;.</value>
  </data>
  <data name="ListFactory_DoubleCountInvoke" xml:space="preserve">
    <value>&lt;predicate&gt; is called with the parameter of double type &lt;sample&gt; list as a dummy argument, and if the return value is True, it counts up and returns the count number.</value>
  </data>
  <data name="ListFactory_DoubleToInt" xml:space="preserve">
    <value>Create an int type list from a double type list.</value>
  </data>
  <data name="ListFactory_DoubleToString" xml:space="preserve">
    <value>Create a string type list from a double type list.</value>
  </data>
  <data name="ListFactory_FilteringDoubleList" xml:space="preserve">
    <value>&lt;predicate&gt; is called with the parameter of double type &lt;sample&gt; list as a dummy argument, and if the return value is True, it is registered in the list and returned. </value>
  </data>
  <data name="ListFactory_FilteringIntList" xml:space="preserve">
    <value>&lt;predicate&gt; is called with an int type &lt;sample&gt; list element as a dummy argument, and if the return value is True, it is registered in the list and returned. </value>
  </data>
  <data name="ListFactory_FilteringWordList" xml:space="preserve">
    <value>If the element of the &lt;sample&gt; list of string type is a dummy argument and &lt;predicate&gt; is called and the return value is True, it will be registered in the list and returned. </value>
  </data>
  <data name="ListFactory_IntCountInvoke" xml:space="preserve">
    <value>&lt;predicate&gt; is called with an int type &lt;sample&gt; list element as a dummy argument, and if the return value is True, it counts up and returns the count number. </value>
  </data>
  <data name="ListFactory_IntListSetCount" xml:space="preserve">
    <value>Counts how many elements of the int type &lt;sample&gt; list have the same value as &lt;value&gt;.</value>
  </data>
  <data name="ListFactory_IntToDouble" xml:space="preserve">
    <value>Create a double type list from an int type list.</value>
  </data>
  <data name="ListFactory_IntToString" xml:space="preserve">
    <value>Create a string type list from an int type list.</value>
  </data>
  <data name="ListFactory_JoinDoubleList" xml:space="preserve">
    <value>Concatenate a &lt;valus&gt; double type list with &lt;separator&gt; as a separator.</value>
  </data>
  <data name="ListFactory_JoinIntList" xml:space="preserve">
    <value>Concatenate &lt;valus&gt; int type list with &lt;separator&gt; as separator.</value>
  </data>
  <data name="ListFactory_JoinStringList" xml:space="preserve">
    <value>Concatenate &lt;valus&gt; string type list with &lt;separator&gt; as separator.</value>
  </data>
  <data name="ListFactory_MakeListDouble" xml:space="preserve">
    <value>Creates an array with elements where &lt;value&gt; is the starting value and &lt;step&gt; is added by &lt;num&gt;.</value>
  </data>
  <data name="ListFactory_MakeListDouble2" xml:space="preserve">
    <value>Create an array with elements that have &lt;value&gt; as the starting value and &lt;step&gt; as many as &lt;num&gt; and raised to &lt;power&gt;.</value>
  </data>
  <data name="ListFactory_SortAscDoubleList" xml:space="preserve">
    <value>Sorts a double list in descending order.</value>
  </data>
  <data name="ListFactory_SortAscIntList" xml:space="preserve">
    <value>Sorts an int type list in descending order.</value>
  </data>
  <data name="ListFactory_SortAscStringList" xml:space="preserve">
    <value>Sort a list of string type in descending order.</value>
  </data>
  <data name="ListFactory_SortDescDoubleList" xml:space="preserve">
    <value>Sorts a double list in ascending order.</value>
  </data>
  <data name="ListFactory_SortDescIntList" xml:space="preserve">
    <value>Sorts an int type list in ascending order.</value>
  </data>
  <data name="ListFactory_SortDescStringList" xml:space="preserve">
    <value>Sort string list in ascending order.</value>
  </data>
  <data name="ListFactory_StringToParseDoubleList" xml:space="preserve">
    <value>Create a double type list from a string of numbers separated by commas.</value>
  </data>
  <data name="ListFactory_StringToParseIntList" xml:space="preserve">
    <value>Create an int type list from a string of numbers separated by commas.</value>
  </data>
  <data name="ListFactory_WordCount" xml:space="preserve">
    <value>Counts how many elements of the string type &lt;sample&gt; list have the same value as &lt;word&gt;.</value>
  </data>
  <data name="ListFactory_WordCountInvoke" xml:space="preserve">
    <value>&lt;predicate&gt; is called with the parameter of string type &lt;sample&gt; list as a dummy argument, and if the return value is True, it counts up and returns the count number. </value>
  </data>
  <data name="LiteralListType" xml:space="preserve">
    <value>Create a constant list.</value>
  </data>
  <data name="LiteralType" xml:space="preserve">
    <value>Create a constant.</value>
  </data>
  <data name="Lt" xml:space="preserve">
    <value>Judges that (n1) &lt;(n2).</value>
  </data>
  <data name="MathLib_Acos" xml:space="preserve">
    <value>Find the inverse cosine.</value>
  </data>
  <data name="MathLib_Asin" xml:space="preserve">
    <value>Find the arc sine.</value>
  </data>
  <data name="MathLib_Atan" xml:space="preserve">
    <value>Find the arctangent.</value>
  </data>
  <data name="MathLib_Atan2" xml:space="preserve">
    <value>Find radians from &lt;y&gt; and &lt;x&gt;.</value>
  </data>
  <data name="MathLib_Ceiling" xml:space="preserve">
    <value>Requests rounding up of values.</value>
  </data>
  <data name="MathLib_Combination" xml:space="preserve">
    <value>Find the combination.</value>
  </data>
  <data name="MathLib_Cos" xml:space="preserve">
    <value>Find the cosine.</value>
  </data>
  <data name="MathLib_Cosh" xml:space="preserve">
    <value>Finds the hyperbolic cosine.</value>
  </data>
  <data name="MathLib_E" xml:space="preserve">
    <value>Refers to the Napier number (base of natural logarithm).</value>
  </data>
  <data name="MathLib_Factorial" xml:space="preserve">
    <value>Find the factorial.</value>
  </data>
  <data name="MathLib_Floor" xml:space="preserve">
    <value>Requests rounding down.</value>
  </data>
  <data name="MathLib_Max" xml:space="preserve">
    <value>Find the maximum value.</value>
  </data>
  <data name="MathLib_Min" xml:space="preserve">
    <value>Find the minimum value.</value>
  </data>
  <data name="MathLib_Permutation" xml:space="preserve">
    <value>Find the permutation.</value>
  </data>
  <data name="MathLib_PI" xml:space="preserve">
    <value>Refers to the pi.</value>
  </data>
  <data name="MathLib_Polynomial" xml:space="preserve">
    <value>Compute the polynomial solution.</value>
  </data>
  <data name="MathLib_Round" xml:space="preserve">
    <value>Calculates the rounding of values.</value>
  </data>
  <data name="MathLib_Sign" xml:space="preserve">
    <value>Finds +/- 1 indicating whether the negative sign of a value is positive or negative.</value>
  </data>
  <data name="MathLib_Sin" xml:space="preserve">
    <value>Find the sine.</value>
  </data>
  <data name="MathLib_Sinh" xml:space="preserve">
    <value>Find the hyperbolic sine.</value>
  </data>
  <data name="MathLib_Sqrt" xml:space="preserve">
    <value>Find the square root.</value>
  </data>
  <data name="MathLib_Tan" xml:space="preserve">
    <value>Find the tangent.</value>
  </data>
  <data name="MathLib_Tanh" xml:space="preserve">
    <value>Find the hyperbolic tangent.</value>
  </data>
  <data name="MathLib_ToAngle" xml:space="preserve">
    <value>Find the angle in radians.</value>
  </data>
  <data name="MathLib_ToRadian" xml:space="preserve">
    <value>Find radians from angles.</value>
  </data>
  <data name="MathLib_Truncate" xml:space="preserve">
    <value>Calculates the value by rounding the value closer to 0.</value>
  </data>
  <data name="MathNumerics_Clear" xml:space="preserve">
    <value>Clears the Matrix.</value>
  </data>
  <data name="MathNumerics_CreateL" xml:space="preserve">
    <value>Creates a Vector based on the double type list.</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf1Column" xml:space="preserve">
    <value>Create a one-column Matrix based on the double type list.</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf1Row" xml:space="preserve">
    <value>Create a one-line Matrix based on the double type list.</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf2Columns" xml:space="preserve">
    <value>Create a two-column Matrix based on the double type list.</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf2Rows" xml:space="preserve">
    <value>Create a two-line Matrix based on the double type list.</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf3Columns" xml:space="preserve">
    <value>Create a 3-column Matrix based on the double type list.</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf3Rows" xml:space="preserve">
    <value>Create a 3-line Matrix based on the double type list.</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf4Columns" xml:space="preserve">
    <value>Create a 4-column Matrix based on the double type list.</value>
  </data>
  <data name="MathNumerics_CreateMatrixOf4Rows" xml:space="preserve">
    <value>Create a 4-line Matrix based on the double type list.</value>
  </data>
  <data name="MathNumerics_CreateMatrixOfTerm" xml:space="preserve">
    <value>Create a &lt;len&gt; row Matrix based on the &lt;term&gt; degree.</value>
  </data>
  <data name="MathNumerics_CreateV" xml:space="preserve">
    <value>Creates a Vector based on the Vector.</value>
  </data>
  <data name="MathNumerics_CreateVectorFromColumn" xml:space="preserve">
    <value>Create a Vector from the columns of matrix.</value>
  </data>
  <data name="MathNumerics_CreateVectorFromRow" xml:space="preserve">
    <value>Create a Vector from rows of matrix.</value>
  </data>
  <data name="MathNumerics_Dot" xml:space="preserve">
    <value>Calculate the dot product.</value>
  </data>
  <data name="MathNumerics_Inverse" xml:space="preserve">
    <value>Compute the inverse matrix.</value>
  </data>
  <data name="MathNumerics_MatrixToString" xml:space="preserve">
    <value>Converts a Matrix into a string.</value>
  </data>
  <data name="MathNumerics_Mean" xml:space="preserve">
    <value>Calculate the average.</value>
  </data>
  <data name="MathNumerics_Median" xml:space="preserve">
    <value>Calculate the median.</value>
  </data>
  <data name="MathNumerics_OrderStatistic" xml:space="preserve">
    <value>Calculate order statistics.</value>
  </data>
  <data name="MathNumerics_PopulationStandardDeviation" xml:space="preserve">
    <value>Calculate the population standard deviation.</value>
  </data>
  <data name="MathNumerics_PopulationVariance" xml:space="preserve">
    <value>Calculate the population variance.</value>
  </data>
  <data name="MathNumerics_PseudoInverse" xml:space="preserve">
    <value>Compute the pseudo-inverse.</value>
  </data>
  <data name="MathNumerics_StandardDeviation" xml:space="preserve">
    <value>Compute the sample standard deviation.</value>
  </data>
  <data name="MathNumerics_Variance" xml:space="preserve">
    <value>Compute the sample variance.</value>
  </data>
  <data name="Media_CaptureOutGifAnimation" xml:space="preserve">
    <value>Capture video and create GIF animation.</value>
  </data>
  <data name="Media_Capture_all" xml:space="preserve">
    <value>Create a GIF animation based on one movie.</value>
  </data>
  <data name="Media_Capture_all_d_d" xml:space="preserve">
    <value>Create a specified amount of GIF animation from the specified position in the video.</value>
  </data>
  <data name="Media_Capture_cm" xml:space="preserve">
    <value>Converts the current video scene to a bitmap.</value>
  </data>
  <data name="Media_Capture_cm_d" xml:space="preserve">
    <value>Converts the video scene of the specified frame into a bitmap.</value>
  </data>
  <data name="Media_Seek" xml:space="preserve">
    <value>Seeks to the specified frame.</value>
  </data>
  <data name="Mod" xml:space="preserve">
    <value>Reference the remainder of &lt;n1&gt; by &lt;n2&gt;.</value>
  </data>
  <data name="Mul" xml:space="preserve">
    <value>&lt;base&gt; accumulates only the values in the &lt;sample&gt; list.</value>
  </data>
  <data name="Not" xml:space="preserve">
    <value>Inverts the bool value of &lt;sample&gt;.</value>
  </data>
  <data name="Or" xml:space="preserve">
    <value>Determines if any of the &lt;sample&gt; list is true.</value>
  </data>
  <data name="Pow" xml:space="preserve">
    <value>Refers to the power of the radix &lt;n&gt; with &lt;p&gt; as the exponent.</value>
  </data>
  <data name="Rand" xml:space="preserve">
    <value>Refers to a random number between &lt;min&gt; and &lt;max&gt;.</value>
  </data>
  <data name="RandomLib_PMRand" xml:space="preserve">
    <value>Randomly calculate the value with either +/-.</value>
  </data>
  <data name="RandomLib_PmRandomDouble" xml:space="preserve">
    <value>Randomly find a random number between 0 and 1.0 with either +/-.</value>
  </data>
  <data name="RandomLib_PmRandomMulDouble" xml:space="preserve">
    <value>Randomly find a random number between 0 and value with either +/-.</value>
  </data>
  <data name="RandomLib_ProbabilityTrue" xml:space="preserve">
    <value>Returns True as a percentage of 100 * &lt;probability&gt;.</value>
  </data>
  <data name="RandomLib_RandomDouble" xml:space="preserve">
    <value>Find a random number between 0 and 1.0.</value>
  </data>
  <data name="RandomLib_RandomMulDouble" xml:space="preserve">
    <value>Randomly find a random number between 0 and 1.0 with either +/-.</value>
  </data>
  <data name="RandomLib_RandPMRand" xml:space="preserve">
    <value>A random value from &lt;min&gt; to &lt;max&gt; is randomly calculated with either +/-.</value>
  </data>
  <data name="ReturnVoidFor" xml:space="preserve">
    <value>Executes the file specified by &lt;path&gt;. You can specify execution parameters in the &lt;arguments&gt; list. &lt;redirect&gt; Specify the redirect. The exit code cannot be obtained without enabling redirects.</value>
  </data>
  <data name="SA_SetWorkCanvasBG" xml:space="preserve">
    <value>Set the image as the background in the work area.</value>
  </data>
  <data name="SetExitCode" xml:space="preserve">
    <value>Set the exit code of the application and exit the application.</value>
  </data>
  <data name="SetListIndex" xml:space="preserve">
    <value>Substitute &lt;n&gt; for the &lt;index&gt; th element of the &lt;sample&gt; list.</value>
  </data>
  <data name="SetVariable" xml:space="preserve">
    <value>Assign a value to the variable.</value>
  </data>
  <data name="SetVariableToIndex" xml:space="preserve">
    <value>Assign &lt;n&gt; to the &lt;index&gt;th element of the variable list.</value>
  </data>
  <data name="StatisticsLib_MaxInTheList" xml:space="preserve">
    <value>&lt;sample&gt; Refers to the value of the largest element in the list.</value>
  </data>
  <data name="StatisticsLib_MinInTheList" xml:space="preserve">
    <value>&lt;sample&gt; Refers to the value of the smallest element in the list.</value>
  </data>
  <data name="StatisticsLib_NormalizeAbsWidthOfValue" xml:space="preserve">
    <value>&lt;sample&gt; The absolute value of the value range of the list element is calculated, and the value is kept between 0 and 1.0 while maintaining the ratio.</value>
  </data>
  <data name="StatisticsLib_NormalizeWidthOfValue" xml:space="preserve">
    <value>&lt;sample&gt; Calculate the width of the value of the list element and put it between 0 and 1.0 while maintaining the ratio.</value>
  </data>
  <data name="StatisticsLib_SquaredDifference" xml:space="preserve">
    <value>Find the squared difference between &lt;n1&gt; and &lt;n2&gt;. &lt;n1&gt;-&lt;n2&gt; squared</value>
  </data>
  <data name="StatisticsLib_WidthOfValueInTheList" xml:space="preserve">
    <value>&lt;sample&gt; Refers to the distance between the minimum and maximum values in the list.</value>
  </data>
  <data name="String_GetEnter" xml:space="preserve">
    <value>new line(&lt;/n&gt;)</value>
  </data>
  <data name="String_GetEnter2" xml:space="preserve">
    <value>new line(&lt;/r&gt;)</value>
  </data>
  <data name="String_IndexOf" xml:space="preserve">
    <value>References the position of the &lt;value&gt; characters in the &lt;str&gt; string.</value>
  </data>
  <data name="String_IndexOf_s" xml:space="preserve">
    <value>References the position of the &lt;value&gt; string within the &lt;str&gt; string.</value>
  </data>
  <data name="String_IndexOf_s_n" xml:space="preserve">
    <value>It refers to the position of the &lt;value&gt; string after the &lt;index&gt; characters of the &lt;str&gt; string.</value>
  </data>
  <data name="String_IndexOf_s_n_n" xml:space="preserve">
    <value>&lt;str&gt; Refers to the position of the &lt;value&gt; string within the &lt;length&gt; characters after the &lt;index&gt; character of the string.</value>
  </data>
  <data name="String_Insert" xml:space="preserve">
    <value>Inserts the &lt;value&gt; string at the &lt;startIndex&gt; character of the &lt;str&gt; string.</value>
  </data>
  <data name="String_IsMatch" xml:space="preserve">
    <value>&lt;input&gt; Character string is judged by &lt;pattern&gt; regular expression.</value>
  </data>
  <data name="String_Match" xml:space="preserve">
    <value>Refers to the &lt;input&gt; string's &lt;pattern&gt; regular expression match.</value>
  </data>
  <data name="String_MatchCollection" xml:space="preserve">
    <value>Refers to any &lt;pattern&gt; regular expression match in the &lt;input&gt; string.</value>
  </data>
  <data name="String_NewLine" xml:space="preserve">
    <value>new line</value>
  </data>
  <data name="String_Remove" xml:space="preserve">
    <value>&lt;str&gt; Remove &lt;length&gt; characters from the &lt;startIndex&gt; character of the string.</value>
  </data>
  <data name="String_Replace" xml:space="preserve">
    <value>Replace &lt;oldStr&gt; in the &lt;str&gt; string with &lt;newStr&gt;.</value>
  </data>
  <data name="String_Split" xml:space="preserve">
    <value>&lt;str&gt; Split a string by &lt;separator&gt; characters.</value>
  </data>
  <data name="String_SplitFromString" xml:space="preserve">
    <value>&lt;str&gt; Splits a string with a &lt;separator&gt; string.</value>
  </data>
  <data name="String_StartsWith" xml:space="preserve">
    <value>&lt;str&gt; Matches the &lt;value&gt; string from the beginning of the string.</value>
  </data>
  <data name="String_Substring" xml:space="preserve">
    <value>&lt;str&gt; Reference &lt;length&gt; characters from the &lt;startIndex&gt; character of the string.</value>
  </data>
  <data name="String_ToDouble" xml:space="preserve">
    <value>Converts a string to a double type value.</value>
  </data>
  <data name="String_ToFloat" xml:space="preserve">
    <value>Converts a string to a float value.</value>
  </data>
  <data name="String_ToInt" xml:space="preserve">
    <value>Converts a string into an int value.</value>
  </data>
  <data name="String_ToLong" xml:space="preserve">
    <value>Converts a string into a long value.</value>
  </data>
  <data name="String_ToLower" xml:space="preserve">
    <value>Converts lowercase letters in a string to lowercase.</value>
  </data>
  <data name="String_ToUpper" xml:space="preserve">
    <value>Converts lowercase letters in a string to uppercase.</value>
  </data>
  <data name="String_Trim" xml:space="preserve">
    <value>Delete the leading and trailing white space in the string.</value>
  </data>
  <data name="String_TrimEnd" xml:space="preserve">
    <value>Delete the blanks at the end of the string.</value>
  </data>
  <data name="String_TrimStart" xml:space="preserve">
    <value>Delete the blank space at the beginning of the string.</value>
  </data>
  <data name="Sub" xml:space="preserve">
    <value>Subtract &lt;base&gt; by the value in the &lt;sample&gt; list.</value>
  </data>
  <data name="Subroutine" xml:space="preserve">
    <value>&lt;call list&gt; Execute the nodes in the list sequentially. To link anything, create it with object type. Returns the value returned by the last connected node.</value>
  </data>
  <data name="Sum" xml:space="preserve">
    <value>Adds the values in the list.</value>
  </data>
  <data name="Sum_Func" xml:space="preserve">
    <value>The function registered in the &lt;sample&gt; list is called with the added value up to that point (initial value is &lt;base&gt;) as a dummy argument, and the return value is added.</value>
  </data>
  <data name="Union_Add" xml:space="preserve">
    <value>Find the set with the elements of set B added to set A.</value>
  </data>
  <data name="Union_And" xml:space="preserve">
    <value>Find the intersection of set A and set B.</value>
  </data>
  <data name="Union_AndCount" xml:space="preserve">
    <value>Find the number of intersections.</value>
  </data>
  <data name="Union_Dice" xml:space="preserve">
    <value>Find the Dice coefficient.</value>
  </data>
  <data name="Union_IfEq" xml:space="preserve">
    <value>Determine if set A and set B are the same set.</value>
  </data>
  <data name="Union_IfNotEq" xml:space="preserve">
    <value>Determine that sets A and B are not the same set.</value>
  </data>
  <data name="Union_IfNotSubset" xml:space="preserve">
    <value>Determine that set B is not a subset of set A.</value>
  </data>
  <data name="Union_IfNotTrueSubset" xml:space="preserve">
    <value>Determine that set B is not a true subset of set A.</value>
  </data>
  <data name="Union_IfSubset" xml:space="preserve">
    <value>Determine if set B is a subset of set A.</value>
  </data>
  <data name="Union_IfTrueSubset" xml:space="preserve">
    <value>Determine if set B is a true subset of set A.</value>
  </data>
  <data name="Union_Jaccard" xml:space="preserve">
    <value>Calculate the Jaccard coefficient.</value>
  </data>
  <data name="Union_Or" xml:space="preserve">
    <value>Find the union of sets A and B.</value>
  </data>
  <data name="Union_OrCount" xml:space="preserve">
    <value>Find the number of unions.</value>
  </data>
  <data name="Union_Simpson" xml:space="preserve">
    <value>Find the Simpson coefficient.</value>
  </data>
  <data name="Union_Sub" xml:space="preserve">
    <value>Find the set by removing the elements of set B from set A.</value>
  </data>
</root>